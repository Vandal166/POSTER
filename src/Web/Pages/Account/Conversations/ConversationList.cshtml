@page
@using Application.DTOs
@model Web.Pages.Account.Conversations.ConversationList
@inject Application.Contracts.ICurrentUserService CurrentUser

@{
    ViewData["Title"] = "Conversations";
}

<div class="container py-4" style="max-width: 600px;">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h4 class="fw-bold mb-0">Conversations</h4>
        <button type="button" class="btn btn-primary text-start fw-bold" data-bs-toggle="modal" data-bs-target="#newConversationModal">
            <i class="bi bi-envelope-plus me-2"></i>New Conversation
        </button>
    </div>
    
    <div id="conversations-container">
        <partial name="Shared/Account/Conversations/_ConversationListPartial" model="Model.Conversations"/>
    </div>
    @if (Model.Conversations.Any())
    {
        <!-- Pagination -->
        <nav aria-label="Conversations pagination">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link" asp-route-pageNumber="@(Model.CurrentPage - 1)">Previous</a>
                </li>
                @for (var i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link" asp-route-pageNumber="@i">@i</a>
                    </li>
                }
                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    <a class="page-link" asp-route-pageNumber="@(Model.CurrentPage + 1)">Next</a>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <div class="alert alert-info">There are no conversations to show.</div>
    }
</div>

@await Html.PartialAsync("Shared/Account/Conversations/_CreateConversationPartial", new CreateConversationDto(string.Empty, Guid.Empty))

<auth-only>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/conversationHub")
            .withAutomaticReconnect({
                nextRetryDelayInMilliseconds: retryContext => {
                    if (retryContext.previousRetryCount < 5) {
                        return 1000 * Math.pow(2, retryContext.previousRetryCount); // Exponential backoff
                    }
                    return null; // Stop retrying after 5 attempts
                }
            })
            .build();
    
        // Listening for ConversationCreated event
        connection.on("ConversationCreated", function (conversationId)
        {
            // fetching the new conv
            fetch(`?handler=NewConversationPartial&conversationId=${conversationId}`)
                .then(response => response.text())
                .then(html =>
                {
                    const container = document.getElementById("conversations-container");
                    // prepending the new message to the top of the container
                    container.insertAdjacentHTML('beforeend', html);
    
                    // scrolling to bottom only if the user is near the bottom of the scroll
                    if (container.scrollTop >= -160 && container.scrollTop <= 0) {
                        container.scrollTop = container.scrollHeight;
                    }
                });
        });
        
        connection.on("ConversationDeleted", function (conversationId)
        {
            const conversationElement = document.querySelector(`#conversation-${conversationId}`);
            if (conversationElement) {
                conversationElement.remove();
            }
        });
        
        connection.on("MessageCreated", function (conversationId)
        {
            // fetching the new message
            fetch(`?handler=NewMessagePartial&conversationId=${conversationId}`)
                .then(response => response.text())
                .then(html =>
                {
                    const container = document.getElementById("conversations-container");
                    const conversationElement = document.querySelector(`#conversation-${conversationId}`);
                    // deleting the old conversation element if it exists so it doesn't duplicate
                    if (conversationElement) {
                        conversationElement.remove();
                    }
                    // prepending the new message to the top of the container
                    container.insertAdjacentHTML('afterbegin', html);
    
                    // if the user is on the first page, scroll to the bottom
                    if (@Model.CurrentPage === 1) 
                    {
                        container.scrollTop = 0;
                    }
                });
        });

        connection.on("ParticipantRemoved", function (conversationId, participantId)
        {
            // just redirecting to the conversation list page if we are the participant that was removed
            if (participantId === "@CurrentUser.ID.ToString()") {
                const conversationElement = document.querySelector(`#conversation-${conversationId}`);
                if (conversationElement) {
                    conversationElement.remove();
                }
            }
        });
    
        // joining the conversation group
        connection.start()
            .then(() => {
                const userConversationIds = @Html.Raw(Json.Serialize(Model.ConversationsIds));
                
                connection.invoke("JoinConversationGroups", userConversationIds)
                    .then(() => console.log("JoinGroup invoked successfully."))
                    .catch(err => console.error("Error invoking JoinGroup:", err));
            })
            .catch(err => console.error("Error connecting to conversation hub:", err));
    </script>
</auth-only>
