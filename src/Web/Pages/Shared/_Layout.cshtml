@using Application.DTOs
@inject Application.Contracts.ICurrentUserService CurrentUser

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>@ViewData["Title"] - Poster</title>
    <script type="importmap"></script>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true"/>
    <link rel="stylesheet" href="~/Web.styles.css" asp-append-version="true"/>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/9.0.6/signalr.min.js" integrity="sha512-kkMt8UThSmWcdXLYFaGZ/U6vyWSNLZMUWQ5SMeF80pGqrEkH5ei9D/3MbVQpB8p7D5C3A4vlX7BpsWTT2BfB6A==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
</head>
<body class="bg-light">
<header class="border-bottom bg-white">
    <nav class="navbar navbar-expand-lg navbar-light me-3">
        <!-- Web Logo -->
        <a class="navbar-brand fw-bold text-primary ms-1" asp-page="/Index">Poster</a>

        <!-- Search Bar -->
        <form class="d-none d-md-flex mx-auto border rounded-3" method="get" asp-page="/Search">
            <div class="input-group flex-nowrap">
                <span class="input-group-text bg-white border-0">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" name="q" class="form-control form-control-lg border-0 shadow-none" placeholder="Search posts..." />
            </div>
        </form>

        <!-- Right Side: User Info & Auth Buttons -->
        <div class="ms-auto d-flex align-items-center">
            <auth-only>
                <div asp-authenticated="true" class="d-flex align-items-center me-3">
                    <a asp-page="/Account/Profile" asp-route-identifier="@CurrentUser.Username" class="d-flex align-items-center text-decoration-none user-profile-link" style="color: inherit">
                        <img src="@Url.Content("~/" + CurrentUser.AvatarPath)" alt="Avatar" class="rounded-circle" width="32" height="32" />
                        <span class="ms-2 fw-semibold">@CurrentUser.Username</span>
                    </a>
                    <form method="post" asp-page="/Account/Logout" class="mb-0">
                        <button type="submit" class="btn btn-outline-danger btn-sm ms-2">Logout</button>
                    </form>
                </div>
            </auth-only>
                
            <anon-only>
                <a class="btn btn-outline-primary btn-sm me-2" asp-page="/Account/Login">Login</a>
                <a class="btn btn-primary btn-sm" asp-page="/Account/Register">Sign Up</a>
            </anon-only>
        </div>
    </nav>
</header>

<div class="main-wrapper">
    <div class="row mt-3">
        <!-- Left Sidebar -->
        <aside class="col-2 col-md-3 col-lg-2 bg-white">
            <div class="d-flex flex-column">
                <!-- Trigger Button -->
                <button type="button" class="btn btn-primary text-start mb-3 fw-bold"
                        data-bs-toggle="modal" data-bs-target="#createPostModal">
                    <i class="bi bi-send-fill me-2"></i> New Post
                </button>

                <a asp-page="/Index" class="btn btn-light text-start mb-2">
                    <i class="bi bi-house-door me-2"></i> Home
                </a>
                    
                <a asp-page="/Account/Conversations/ConversationList" class="btn btn-light text-start mb-2">
                    <i class="bi bi-chat-dots me-2"></i> Conversations
                </a>
                    
                <a  asp-page="/Account/Notifications/Notifications" class="btn btn-light text-start mb-2" id="notification-link">
                    <i class="bi bi-bell me-2"></i> Notifications
                </a>
                <a asp-page="/Account/Profile" asp-route-identifier="@CurrentUser.Username" class="btn btn-light text-start">
                    <i class="bi bi-person me-2"></i> Profile
                </a>
            </div>
        </aside>

        <!-- Main Content Area -->
        <main role="main" class="col-10 col-md-9 col-lg-7">
            @RenderBody()
        </main>
        <div id="center-line" style="
                position: fixed;
                top: 50%;
                left: 0;
                width: 100%;
                height: 1px;
                pointer-events: none;
                background-color: transparent; /* red for testing */
                z-index: 9999;">
        </div>

        <!-- Optional Right Sidebar (for trends, suggestions, etc.) -->
        <aside class="d-none d-lg-block col-lg-3">
            <div class="p-3 bg-white">
                <h5 class="mb-3">Trending Topics</h5>
                <ul class="list-unstyled">
                    <li><a href="#" class="text-decoration-none">#ASP.NETCore</a></li>
                    <li><a href="#" class="text-decoration-none">#Blazor</a></li>
                    <li><a href="#" class="text-decoration-none">#WebDevelopment</a></li>
                    <li><a href="#" class="text-decoration-none">#CSharp</a></li>
                </ul>
            </div>
        </aside>
    </div>
</div>

<footer class="border-top text-muted text-center mt-4 py-2">
    &copy; 2025 - Poster - <a asp-page="/Privacy">Privacy</a>
</footer>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
<script src="~/js/htmx.min.js"></script>
<script src="~/js/showToastNotif.js"> </script>

@await RenderSectionAsync("Scripts", required: false)
@await Html.PartialAsync("Shared/Posts/_CreatePostPartial", new CreatePostDto(string.Empty))
@await Html.PartialAsync("Shared/_ToastNotificationPartial")
@await Component.InvokeAsync("Toast")
</body>
</html>

<auth-only>
    <script>
        const followHubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/followHub")
            .withAutomaticReconnect({
                nextRetryDelayInMilliseconds: retryContext => {
                    if (retryContext.previousRetryCount < 5) {
                        return 1000 * Math.pow(2, retryContext.previousRetryCount); // Exponential backoff
                    }
                    return null; // Stop retrying after 5 attempts
                }
            })
            .build();
        
        const conversationHubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/conversationHub")
            .withAutomaticReconnect({
                nextRetryDelayInMilliseconds: retryContext => {
                    if (retryContext.previousRetryCount < 5) {
                        return 1000 * Math.pow(2, retryContext.previousRetryCount); // Exponential backoff
                    }
                    return null; // Stop retrying after 5 attempts
                }
            })
            .build();

        document.addEventListener("DOMContentLoaded", function () {
            fetch(`/Account/Notifications/Notifications?handler=UserNotificationCount`)
                .then(response => response.json())
                .then(data => {
                    if(data.count > 0) {
                        showNotificationDotIfUnread();
                    }
                });
        });
        
        followHubConnection.on("Followed", function (followerId, followingId) {
            console.log(`New follow: ${followerId} followed ${followingId}`);
            if (followingId === '@CurrentUser.ID.ToString()') {
                console.log(`You have a new follower: ${followerId}`);
                showNotificationDotIfUnread();
            }
        });
        
        followHubConnection.on("PostCreated", function (postId, followerId) {
            console.log(`New post created by follower: ${followerId}`);
            if (followerId === '@CurrentUser.ID.ToString()') {
                // fetching the new message
                console.log(`You have a new post from follower: ${followerId}`);
                fetch(`/Account/Notifications/Notifications?handler=UserNotificationCount`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.count > 0) {
                            console.log(`You have ${data.count} unread notifications.`);
                            showNotificationDotIfUnread();
                        }
                    });
            }
        });
        
        followHubConnection.on("CommentOnPostReceived", function (authorOfPostID) {
            if (authorOfPostID === '@CurrentUser.ID.ToString()') {
                // fetching the new message
                fetch(`/Account/Notifications/Notifications?handler=UserNotificationCount`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.count > 0) {
                            console.log(`You have ${data.count} unread notifications.`);
                            showNotificationDotIfUnread();
                        }
                    });
            }
        });
        
        followHubConnection.on("CommentOnCommentReceived", function (authorOfParentCommentId) {
            if (authorOfParentCommentId === '@CurrentUser.ID.ToString()') {
                // fetching the new message
                fetch(`/Account/Notifications/Notifications?handler=UserNotificationCount`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.count > 0) {
                            console.log(`You have ${data.count} unread notifications.`);
                            showNotificationDotIfUnread();
                        }
                    });
            }
        });

        conversationHubConnection.on("ConversationCreated", function (conversationId) {
            console.log(`New conversation created: ${conversationId}`);
            fetch(`/Account/Notifications/Notifications?handler=UserNotificationCount`)
                .then(response => response.json())
                .then(data => {
                    if (data.count > 0) {
                        console.log(`You have ${data.count} unread notifications.`);
                        showNotificationDotIfUnread();
                    }
                });
        });

        function showNotificationDotIfUnread() {
            const notificationLink = document.getElementById('notification-link');
            if (notificationLink) {
                // adding blue dot only if not already present
                if (!notificationLink.querySelector('.notif-dot')) {
                    const dot = document.createElement('span');
                    dot.className = 'notif-dot';
                    dot.style.cssText = 'display:inline-block;width:10px;height:10px;background:#0d6efd;border-radius:50%;margin-left:6px;vertical-align:middle;';
                    notificationLink.appendChild(dot);
                }
            }
        }
        followHubConnection.start()
            .then(() => {
                fetch(`/Account/Notifications/Notifications?handler=UserFollowIds`)
                    .then(response => response.json())
                    .then(userFollowersIds => {
                        followHubConnection.invoke("JoinFollowGroups", userFollowersIds)
                            .then(() => {
                                console.log("JoinGroup invoked successfully.");
                                console.log("userFollowersIds:", userFollowersIds);
                            })
                            .catch(err => console.error("Error invoking JoinGroup:", err));
                    })
                    .catch(err => console.error("Error fetching follow IDs:", err));
            })
            .catch(err => console.error("Error connecting to conversation hub:", err));
        
        conversationHubConnection.start().catch(err => console.error("Error connecting to conversation hub:", err));
        
    </script>
</auth-only>