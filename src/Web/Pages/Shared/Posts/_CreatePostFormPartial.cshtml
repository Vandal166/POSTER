@model Application.DTOs.CreatePostDto
@inject Application.Contracts.ICurrentUserService CurrentUser

<form method="post"
      asp-page="/Posts/CreatePost"
      hx-post="/Posts/CreatePost"
      hx-target="#create-post-modal-content"
      hx-swap="innerHTML"
      asp-antiforgery="true" id="createPostForm">
    
    <div class="modal-header border-0">
        <h5 class="modal-title fw-semibold" id="createPostModalLabel">Create Post</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>

    <div class="modal-body">
        <div class="d-flex align-items-start">
            <img src="@Url.Content("~/" + CurrentUser.AvatarPath)" class="rounded-circle me-3" width="40" height="40" alt="Avatar" />
            <textarea asp-for="Content"
                      class="form-control bg-light"
                      placeholder="What's on your mind?"
                      rows="3" minlength="4" maxlength="1800"
                      required
                      style="resize: none; box-shadow: none; overflow: hidden;"
                      oninput="this.style.height='auto';this.style.height=this.scrollHeight + 'px';"></textarea>
            
            
            <span asp-validation-for="Content" class="text-danger"></span>
        </div>
        
        <!-- Video Preview -->
        <div id="videoPreview" class="mt-3 d-none position-relative">
            <video id="videoElement"
                   class="w-100 rounded shadow-sm"
                   controls muted></video>
        
            <button type="button"
                    class="btn btn-sm btn-outline-danger position-absolute"
                    style="top: 8px; right: 8px; z-index: 2;"
                    id="removeVideoBtn">
                <i class="bi bi-x"></i>
            </button>
        </div>
        
        <!-- Images Preview -->
        <div id="imagePreviewList" class="mt-3 d-none position-relative"></div>
    </div>
    
    <div class="px-3"><hr/></div>
    
    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>
    
    <div class="modal-footer border-0">
        <div>
            <!-- Upload Trigger -->
            <button type="button" class="btn btn-outline-secondary" id="uploadVideoBtn">
                <i class="bi bi-camera-video"></i>
            </button>

            <!-- Hidden File Input -->
            <input type="file" id="videoInput" accept="video/*" style="display: none;" />

            <!-- Hidden Field to hold uploaded video ID -->
            <input type="hidden" name="VideoFileID" id="videoFileID" />
            
        </div>
        
        <div>
            <!-- Upload for images -->
            <button type="button" class="btn btn-outline-secondary" id="uploadImageBtn">
                <i class="bi bi-image"></i>
            </button>
            
            <!-- Hidden File Input for Images (allow multiple) -->
            <input type="file" id="imageInput" accept="image/*" multiple style="display: none;" />
            
        </div>
        
        <button type="submit" class="btn btn-primary px-4">
            <i class="bi bi-send-fill me-2"></i>Post
        </button>
    </div>
</form>

<auth-only>
    <script src="js/postVideosHandler.js"></script>
    <script src="js/postImagesHandler.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const modal = document.getElementById('createPostModal');
            if (!modal) return;
        //ON HIDING THE MODAL, WE DELETE UPLOADED MEDIA
            modal.addEventListener('hidden.bs.modal', async () => {
                // Remove uploaded video if present
                const videoFileID = document.getElementById('videoFileID')?.value;
                if (videoFileID) {
                    try {
                        const response = await fetch(`/videos/${videoFileID}`, { method: 'DELETE' });
                        if (response.ok) {
                            console.log(`Video with ID ${videoFileID} deleted successfully.`);
                        } else {
                            console.error(`Failed to delete video with ID ${videoFileID}:`, response.statusText);
                        }
                    } catch (err) {
                        console.error('Failed to delete video:', err);
                    }
                }
        
                // Remove uploaded images if present
                if (window.imageIDs && Array.isArray(window.imageIDs)) {
                    for (const fileID of window.imageIDs) {
                        try {
                            const response = await fetch(`/images/${fileID}`, { method: 'DELETE' });
                            if (response.ok) {
                                console.log(`Image with ID ${fileID} deleted successfully.`);
                            } else {
                                console.error(`Failed to delete image with ID ${fileID}:`, response.statusText);
                            }
                        } catch (err) {
                            console.error('Failed to delete image:', err);
                        }
                    }
                    window.imageIDs = [];
                }
            });
        });
    </script>
</auth-only>
